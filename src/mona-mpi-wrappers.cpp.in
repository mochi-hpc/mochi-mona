#include <stdexcept>
#include <unordered_map>
#include <algorithm>
#include <iostream>
#include <mpi.h>
#include <mona-coll.h>

static std::unordered_map<MPI_Comm, MPI_Comm> _user_comm_to_mpi;
static std::unordered_map<MPI_Comm, mona_comm_t> _user_comm_to_mona;

static MPI_Comm last_user_comm = (MPI_Comm)42;

static size_t get_datatype_size(MPI_Datatype dt) {
    switch(dt) {
    case MPI_CHAR:
    case MPI_SIGNED_CHAR:
    case MPI_UNSIGNED_CHAR:
    case MPI_BYTE:
        return sizeof(char);
    case MPI_WCHAR:
        return sizeof(wchar_t);
    case MPI_SHORT:
    case MPI_UNSIGNED_SHORT:
        return sizeof(short);
    case MPI_INT:
    case MPI_UNSIGNED:
        return sizeof(int);
    case MPI_LONG:
    case MPI_UNSIGNED_LONG:
        return sizeof(long);
    case MPI_LONG_LONG:
    case MPI_UNSIGNED_LONG_LONG:
        return sizeof(long long);
    case MPI_FLOAT:
        return sizeof(float);
    case MPI_DOUBLE:
        return sizeof(double);
    case MPI_LONG_DOUBLE:
        return sizeof(long double);
    case MPI_INT8_T:
    case MPI_UINT8_T:
        return sizeof(int8_t);
    case MPI_INT16_T:
    case MPI_UINT16_T:
        return sizeof(int16_t);
    case MPI_INT32_T:
    case MPI_UINT32_T:
        return sizeof(int32_t);
    case MPI_INT64_T:
    case MPI_UINT64_T:
        return sizeof(int64_t);
    case MPI_C_BOOL:
        return sizeof(_Bool);
    case MPI_C_FLOAT_COMPLEX:
        return sizeof(float _Complex);
    case MPI_C_DOUBLE_COMPLEX:
        return sizeof(double _Complex);
    case MPI_C_LONG_DOUBLE_COMPLEX:
        return sizeof(long double _Complex);
    default:
        break;
    }
    return 0;
}

static inline bool is_mona_comm(MPI_Comm user_comm) {
    return _user_comm_to_mona.count(user_comm);
}

static inline mona_comm_t get_mona_comm_from(MPI_Comm user_comm) {
    return _user_comm_to_mona[user_comm];
}

static inline MPI_Comm get_mpi_comm_from(MPI_Comm user_comm) {
    if(user_comm == MPI_COMM_NULL
    || user_comm == MPI_COMM_SELF
    || user_comm == MPI_COMM_WORLD)
        return user_comm;
    return _user_comm_to_mpi[user_comm];
}

static inline MPI_Comm register_new_mpi_comm(MPI_Comm mpi_comm) {
    do {
        last_user_comm += 1;
    } while(last_user_comm == MPI_COMM_NULL
         || last_user_comm == MPI_COMM_SELF
         || last_user_comm == MPI_COMM_WORLD);
    _user_comm_to_mpi[last_user_comm] = mpi_comm;
    return last_user_comm;
}

static inline void deregister_mpi_comm(MPI_Comm mpi_comm) {
    auto it = std::find_if(_user_comm_to_mpi.begin(),
                           _user_comm_to_mpi.end(),
                           [mpi_comm](const auto& p) {
                                return p.second == mpi_comm;
                            });
    if(it != _user_comm_to_mpi.end())
        _user_comm_to_mpi.erase(it);
}

static inline MPI_Comm register_new_mona_comm(mona_comm_t mona_comm) {
    do {
        last_user_comm += 1;
    } while(last_user_comm == MPI_COMM_NULL
         || last_user_comm == MPI_COMM_SELF
         || last_user_comm == MPI_COMM_WORLD);
    _user_comm_to_mona[last_user_comm] = mona_comm;
    return last_user_comm;
}

static inline void deregister_mona_comm(mona_comm_t mona_comm) {
    auto it = std::find_if(_user_comm_to_mona.begin(),
                           _user_comm_to_mona.end(),
                           [mona_comm](const auto& p) {
                                return p.second == mona_comm;
                            });
    if(it != _user_comm_to_mona.end())
        _user_comm_to_mona.erase(it);
}

extern "C" int MPI_Register_mona_comm(mona_comm_t comm, MPI_Comm* newcomm) {
    auto it = std::find_if(_user_comm_to_mona.begin(),
                           _user_comm_to_mona.end(),
                           [comm](const auto& p) {
                                return p.second == comm;
                            });
    if(it != _user_comm_to_mona.end())
        *newcomm = it->first;
    else
        *newcomm = register_new_mona_comm(comm);
    return 0;
}

// ------------------------------------------------------------------------ //
// MONA implementation of a subset of MPI functions
// ------------------------------------------------------------------------ //

static int MONA_MPI_Comm_size(MPI_Comm user_comm, int* size) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_size(mona_comm, size);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Comm_rank(MPI_Comm user_comm, int* rank) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_rank(mona_comm, rank);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Comm_free(MPI_Comm* user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(*user_comm);
    deregister_mona_comm(mona_comm);
    *user_comm = MPI_COMM_NULL;
    return 0;
}

static int MONA_MPI_Send(const void *buf, int count, MPI_Datatype datatype,
                         int dest, int tag, MPI_Comm user_comm) {
    size_t dtype_size = get_datatype_size(datatype);
    if(dtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_send(mona_comm, buf, count*dtype_size, dest, tag);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Recv(void *buf, int count, MPI_Datatype datatype,
                         int src, int tag, MPI_Comm user_comm, MPI_Status* status) {
    size_t dtype_size = get_datatype_size(datatype);
    if(dtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t received_size = 0;
    na_return_t ret = mona_comm_recv(mona_comm, buf, count*dtype_size, src, tag, &received_size);
    if(ret != NA_SUCCESS) return ret;
    if(status && status != MPI_STATUS_IGNORE) {
        PMPI_Status_set_elements(status, datatype, received_size/dtype_size);
        PMPI_Status_set_cancelled(status, 0);
    }
    return 0;
}

static int MONA_MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                             int dest, int sendtag,
                             void *recvbuf, int recvcount, MPI_Datatype recvtype,
                             int source, int recvtag,
                             MPI_Comm user_comm, MPI_Status *status) {
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t received_size = 0;
    na_return_t ret = mona_comm_sendrecv(
        mona_comm, sendbuf, sendcount*sendtype_size, dest, sendtag,
        recvbuf, recvcount*recvtype_size, source, recvtag, &received_size);
    if(ret != NA_SUCCESS) return ret;
    if(status && status != MPI_STATUS_IGNORE) {
        PMPI_Status_set_elements(status, recvtype, received_size/recvtype_size);
        PMPI_Status_set_cancelled(status, 0);
    }
    return 0;
}

static int MONA_MPI_Barrier(MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    return (int)mona_comm_barrier(mona_comm, 0);
}

static int MONA_MPI_Bcast(void* buffer, int count,
                          MPI_Datatype datatype, int root, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t type_size = get_datatype_size(datatype);
    return (int)mona_comm_bcast(mona_comm, buffer, count*type_size, root, 0);
}

// ------------------------------------------------------------------------ //
// Default MONA implementation for non-supported functions
// ------------------------------------------------------------------------ //

{{foreachfn FUNCTION MPI_Abort
                 MPI_Allgather
                 MPI_Allgatherv
                 MPI_Allreduce
                 MPI_Alltoall
                 MPI_Alltoallv
                 MPI_Alltoallw
                 MPI_Attr_delete
                 MPI_Attr_get
                 MPI_Attr_put
                 MPI_Bsend
                 MPI_Bsend_init
                 MPI_Cart_coords
                 MPI_Cart_get
                 MPI_Cart_map
                 MPI_Cart_rank
                 MPI_Cart_shift
                 MPI_Cart_sub
                 MPI_Cartdim_get
                 MPI_Comm_accept
                 MPI_Comm_call_errhandler
                 MPI_Comm_connect
                 MPI_Comm_create
                 MPI_Comm_create_group
                 MPI_Comm_delete_attr
                 MPI_Comm_dup
                 MPI_Comm_dup_with_info
                 MPI_Comm_get_attr
                 MPI_Comm_get_errhandler
                 MPI_Comm_get_info
                 MPI_Comm_get_name
                 MPI_Comm_group
                 MPI_Comm_idup
                 MPI_Comm_remote_group
                 MPI_Comm_remote_size
                 MPI_Comm_set_attr
                 MPI_Comm_set_errhandler
                 MPI_Comm_set_info
                 MPI_Comm_set_name
                 MPI_Comm_split
                 MPI_Comm_split_type
                 MPI_Comm_test_inter
                 MPI_Dist_graph_create_adjacent
                 MPI_Dist_graph_neighbors
                 MPI_Dist_graph_neighbors_count
                 MPI_Errhandler_get
                 MPI_Errhandler_set
                 MPI_Exscan
                 MPI_File_open
                 MPI_Gather
                 MPI_Gatherv
                 MPI_Graph_get
                 MPI_Graph_map
                 MPI_Graph_neighbors
                 MPI_Graph_neighbors_count
                 MPI_Graphdims_get
                 MPI_Iallgather
                 MPI_Iallgatherv
                 MPI_Iallreduce
                 MPI_Ialltoall
                 MPI_Ialltoallv
                 MPI_Ialltoallw
                 MPI_Ibarrier
                 MPI_Ibcast
                 MPI_Ibsend
                 MPI_Iexscan
                 MPI_Igather
                 MPI_Igatherv
                 MPI_Improbe
                 MPI_Ineighbor_allgather
                 MPI_Ineighbor_allgatherv
                 MPI_Ineighbor_alltoall
                 MPI_Ineighbor_alltoallv
                 MPI_Ineighbor_alltoallw
                 MPI_Iprobe
                 MPI_Irecv
                 MPI_Ireduce
                 MPI_Ireduce_scatter
                 MPI_Ireduce_scatter_block
                 MPI_Irsend
                 MPI_Iscatter
                 MPI_Iscatterv
                 MPI_Isend
                 MPI_Issend
                 MPI_Mprobe
                 MPI_Neighbor_allgather
                 MPI_Neighbor_allgatherv
                 MPI_Neighbor_alltoall
                 MPI_Neighbor_alltoallv
                 MPI_Neighbor_alltoallw
                 MPI_Pack
                 MPI_Pack_size
                 MPI_Probe
                 MPI_Recv_init
                 MPI_Reduce
                 MPI_Reduce_scatter
                 MPI_Reduce_scatter_block
                 MPI_Rsend
                 MPI_Rsend_init
                 MPI_Scan
                 MPI_Scatter
                 MPI_Scatterv
                 MPI_Send_init
                 MPI_Sendrecv_replace
                 MPI_Ssend
                 MPI_Ssend_init
                 MPI_Topo_test
                 MPI_Unpack
                 MPI_Win_allocate
                 MPI_Win_allocate_shared
                 MPI_Win_create
                 MPI_Win_create_dynamic
                 MPI_Intercomm_merge
                 MPI_Graph_create
                 MPI_Comm_compare
                 MPI_Intercomm_create
                 MPI_Comm_disconnect
                 MPI_Dist_graph_create}}
static {{ret_type}} MONA_{{FUNCTION}}{{argTypeList}} {
    std::cerr << "MONA_{{FUNCTION}} not implemented" << std::endl;
    return -1;
}
{{endforeachfn}}

// ------------------------------------------------------------------------ //
// PMPI wrappers for functions that have an argument requiring translation
// (MPI_Comm, MPI_Request, etc.)
// ------------------------------------------------------------------------ //

#define IS_MONA_COMM(__comm__) \
        int __is_mona_comm = is_mona_comm(__comm__)

#define CONVERT_TO_MPI_COMM(__comm__) \
        __comm__ = get_mpi_comm_from(__comm__)

{{fn    FUNCTION MPI_Abort
                 MPI_Allgather
                 MPI_Allgatherv
                 MPI_Allreduce
                 MPI_Alltoall
                 MPI_Alltoallv
                 MPI_Alltoallw
                 MPI_Attr_delete
                 MPI_Attr_get
                 MPI_Attr_put
                 MPI_Barrier
                 MPI_Bcast
                 MPI_Bsend
                 MPI_Bsend_init
                 MPI_Cart_coords
                 MPI_Cart_get
                 MPI_Cart_map
                 MPI_Cart_rank
                 MPI_Cart_shift
                 MPI_Cart_sub
                 MPI_Cartdim_get
                 MPI_Comm_accept
                 MPI_Comm_call_errhandler
                 MPI_Comm_connect
                 MPI_Comm_create
                 MPI_Comm_create_group
                 MPI_Comm_delete_attr
                 MPI_Comm_dup
                 MPI_Comm_dup_with_info
                 MPI_Comm_get_attr
                 MPI_Comm_get_errhandler
                 MPI_Comm_get_info
                 MPI_Comm_get_name
                 MPI_Comm_group
                 MPI_Comm_idup
                 MPI_Comm_rank
                 MPI_Comm_remote_group
                 MPI_Comm_remote_size
                 MPI_Comm_set_attr
                 MPI_Comm_set_errhandler
                 MPI_Comm_set_info
                 MPI_Comm_set_name
                 MPI_Comm_size
                 MPI_Comm_split
                 MPI_Comm_split_type
                 MPI_Comm_test_inter
                 MPI_Dist_graph_create_adjacent
                 MPI_Dist_graph_neighbors
                 MPI_Dist_graph_neighbors_count
                 MPI_Errhandler_get
                 MPI_Errhandler_set
                 MPI_Exscan
                 MPI_File_open
                 MPI_Gather
                 MPI_Gatherv
                 MPI_Graph_get
                 MPI_Graph_map
                 MPI_Graph_neighbors
                 MPI_Graph_neighbors_count
                 MPI_Graphdims_get
                 MPI_Iallgather
                 MPI_Iallgatherv
                 MPI_Iallreduce
                 MPI_Ialltoall
                 MPI_Ialltoallv
                 MPI_Ialltoallw
                 MPI_Ibarrier
                 MPI_Ibcast
                 MPI_Ibsend
                 MPI_Iexscan
                 MPI_Igather
                 MPI_Igatherv
                 MPI_Improbe
                 MPI_Ineighbor_allgather
                 MPI_Ineighbor_allgatherv
                 MPI_Ineighbor_alltoall
                 MPI_Ineighbor_alltoallv
                 MPI_Ineighbor_alltoallw
                 MPI_Iprobe
                 MPI_Irecv
                 MPI_Ireduce
                 MPI_Ireduce_scatter
                 MPI_Ireduce_scatter_block
                 MPI_Irsend
                 MPI_Iscatter
                 MPI_Iscatterv
                 MPI_Isend
                 MPI_Issend
                 MPI_Mprobe
                 MPI_Neighbor_allgather
                 MPI_Neighbor_allgatherv
                 MPI_Neighbor_alltoall
                 MPI_Neighbor_alltoallv
                 MPI_Neighbor_alltoallw
                 MPI_Pack
                 MPI_Pack_size
                 MPI_Probe
                 MPI_Recv
                 MPI_Recv_init
                 MPI_Reduce
                 MPI_Reduce_scatter
                 MPI_Reduce_scatter_block
                 MPI_Rsend
                 MPI_Rsend_init
                 MPI_Scan
                 MPI_Scatter
                 MPI_Scatterv
                 MPI_Send
                 MPI_Send_init
                 MPI_Sendrecv
                 MPI_Sendrecv_replace
                 MPI_Ssend
                 MPI_Ssend_init
                 MPI_Topo_test
                 MPI_Unpack
                 MPI_Win_allocate
                 MPI_Win_allocate_shared
                 MPI_Win_create
                 MPI_Win_create_dynamic
                 MPI_Intercomm_merge
                 MPI_Graph_create
                 MPI_Dist_graph_create}}
    {{applyToType MPI_Comm IS_MONA_COMM}}
    if(__is_mona_comm) {
        {{ret_val}} = MONA_{{FUNCTION}}({{args}});
    } else {
        {{applyToType MON_Comm CONVERT_TO_MPI_COMM}}
        {{callfn}}
    }
{{endfn}}

/* ================== C Wrappers for MPI_Comm_disconnect ================== */
_EXTERN_C_ int PMPI_Comm_disconnect(MPI_Comm *comm);
_EXTERN_C_ int MPI_Comm_disconnect(MPI_Comm *comm) {
    int _wrap_py_return_val = 0;

    IS_MONA_COMM(*comm);

    if(__is_mona_comm) {
        _wrap_py_return_val = MONA_MPI_Comm_disconnect(comm);
    } else {
        MPI_Comm mpi_comm = get_mpi_comm_from(*comm);
        _wrap_py_return_val = PMPI_Comm_disconnect(&mpi_comm);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Comm_free ================== */
_EXTERN_C_ int PMPI_Comm_free(MPI_Comm *comm);
_EXTERN_C_ int MPI_Comm_free(MPI_Comm *comm) {
    int _wrap_py_return_val = 0;

    IS_MONA_COMM(*comm);

    if(__is_mona_comm) {
        _wrap_py_return_val = MONA_MPI_Comm_free(comm);
    } else {
        MPI_Comm mpi_comm = get_mpi_comm_from(*comm);
        _wrap_py_return_val = PMPI_Comm_free(&mpi_comm);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Comm_compare ================== */
_EXTERN_C_ int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
_EXTERN_C_ int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) {
    int _wrap_py_return_val = 0;

    int __comm1_is_mona = is_mona_comm(comm1);
    int __comm2_is_mona = is_mona_comm(comm2);

    if(__comm1_is_mona && __comm2_is_mona) {
        _wrap_py_return_val = MONA_MPI_Comm_compare(comm1, comm2, result);
    } else if(!__comm2_is_mona && !__comm2_is_mona) {
        MPI_Comm mpi_comm1 = get_mpi_comm_from(comm1);
        MPI_Comm mpi_comm2 = get_mpi_comm_from(comm2);
        _wrap_py_return_val = PMPI_Comm_compare(mpi_comm1, mpi_comm2, result);
    } else {
       *result = 0;
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Intercomm_create ================== */
_EXTERN_C_ int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm);
_EXTERN_C_ int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) {
    int _wrap_py_return_val = 0;

    int __is_mona_local_comm = is_mona_comm(local_comm);
    int __is_mona_peer_comm = is_mona_comm(peer_comm);

    if(__is_mona_local_comm && __is_mona_peer_comm) {
        _wrap_py_return_val = MONA_MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm);
    } else if(!__is_mona_local_comm && !__is_mona_peer_comm) {
        MPI_Comm mpi_local_comm = get_mpi_comm_from(local_comm);
        MPI_Comm mpi_peer_comm = get_mpi_comm_from(peer_comm);
        _wrap_py_return_val = PMPI_Intercomm_create(mpi_local_comm, local_leader, mpi_peer_comm, remote_leader, tag, newintercomm);
        *newintercomm = register_new_mpi_comm(*newintercomm);
    } else {
        _wrap_py_return_val = -1;
    }
    return _wrap_py_return_val;
}
