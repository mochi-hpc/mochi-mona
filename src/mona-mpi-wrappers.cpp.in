#include <stdexcept>
#include <unordered_map>
#include <algorithm>
#include <iostream>
#include <vector>
#include <mpi.h>
#include <mona-coll.h>

static std::unordered_map<MPI_Comm, MPI_Comm> _user_comm_to_mpi;
static std::unordered_map<MPI_Comm, mona_comm_t> _user_comm_to_mona;
static MPI_Comm last_user_comm = (MPI_Comm)42;

static std::unordered_map<MPI_Request, MPI_Request> _user_req_to_mpi;
static std::unordered_map<MPI_Request, mona_request_t> _user_req_to_mona;
static MPI_Comm last_user_req = (MPI_Request)1337;

static bool enable_logging = false;
extern "C" int MPI_Mona_enable_logging() {
    enable_logging = true;
    return 0;
}

#define LOG(...) if(enable_logging) fprintf(stderr, __VA_ARGS__)

struct OperationKey {
    MPI_Datatype datatype;
    MPI_Op       mpi_op;
    bool operator==(const OperationKey& other) const {
        return other.datatype == datatype && other.mpi_op == mpi_op;
    }
};

namespace std {
template <> struct hash<OperationKey>
{
    size_t operator()(const OperationKey& k) const
    {
        return hash<MPI_Datatype>()(k.datatype) ^ hash<MPI_Op>()(k.mpi_op);
    }
};
}
struct OperationValue {
    mona_op_t op;
    void*     args;
};

#define OP_MAPPING_FOR(__t1__, __t2__)                                \
    { {MPI_##__t1__, MPI_MAX }, { mona_op_max_##__t2__, (void*)1 } },  \
    { {MPI_##__t1__, MPI_MIN }, { mona_op_min_##__t2__, (void*)2 } },  \
    { {MPI_##__t1__, MPI_SUM }, { mona_op_sum_##__t2__, (void*)3 } },  \
    { {MPI_##__t1__, MPI_PROD }, { mona_op_prod_##__t2__, (void*)4 } },\
    { {MPI_##__t1__, MPI_LAND }, { mona_op_land_##__t2__, (void*)5 } },\
    { {MPI_##__t1__, MPI_BAND }, { mona_op_band_##__t2__, (void*)6 } },\
    { {MPI_##__t1__, MPI_LOR }, { mona_op_lor_##__t2__, (void*)7 } },  \
    { {MPI_##__t1__, MPI_BOR }, { mona_op_bor_##__t2__, (void*)8 } }

static const std::unordered_map<OperationKey, OperationValue> _operations{
    OP_MAPPING_FOR(INT8_T, i8),
    OP_MAPPING_FOR(UINT8_T, u8),
    OP_MAPPING_FOR(INT16_T, i16),
    OP_MAPPING_FOR(UINT16_T, u16),
    OP_MAPPING_FOR(INT32_T, i32),
    OP_MAPPING_FOR(UINT32_T, u32),
    OP_MAPPING_FOR(INT64_T, i64),
    OP_MAPPING_FOR(UINT64_T, u64),
    OP_MAPPING_FOR(FLOAT, f32),
    OP_MAPPING_FOR(DOUBLE, f64),
    { {MPI_DOUBLE_INT, MPI_MAXLOC }, { mona_op_maxloc_f64, (void*)9 } }
};

struct TypeInfo {
    MPI_Datatype closest;
    size_t       size;
};

static const std::unordered_map<MPI_Datatype, TypeInfo> _type_info{
    {MPI_CHAR, {MPI_INT8_T,1} },
    {MPI_SIGNED_CHAR, {MPI_INT8_T,1} },
    {MPI_UNSIGNED_CHAR, {MPI_UINT8_T,1} },
    {MPI_BYTE, {MPI_UINT8_T,1} },
    {MPI_WCHAR, {MPI_INT16_T,2} },
    {MPI_SHORT, {MPI_INT16_T,2} },
    {MPI_UNSIGNED_SHORT, {MPI_UINT16_T,2} },
    {MPI_INT, {MPI_INT32_T,4} },
    {MPI_UNSIGNED, {MPI_UINT32_T,4} },
    {MPI_LONG, {MPI_INT64_T,8} },
    {MPI_UNSIGNED_LONG, {MPI_UINT64_T,8} },
    {MPI_LONG_LONG, {MPI_INT64_T,8} },
    {MPI_UNSIGNED_LONG_LONG, {MPI_UINT64_T,8} },
    {MPI_FLOAT, {MPI_FLOAT,4} },
    {MPI_DOUBLE, {MPI_DOUBLE,8} },
    {MPI_LONG_DOUBLE, {MPI_LONG_DOUBLE,16} },
    {MPI_INT8_T, {MPI_INT8_T,1} },
    {MPI_UINT8_T, {MPI_UINT8_T,1} },
    {MPI_INT16_T, {MPI_INT16_T,2} },
    {MPI_UINT16_T, {MPI_UINT16_T,2} },
    {MPI_INT32_T, {MPI_INT32_T,4} },
    {MPI_UINT32_T, {MPI_UINT32_T,4} },
    {MPI_INT64_T, {MPI_INT64_T,8} },
    {MPI_UINT64_T, {MPI_UINT64_T,8} },
    {MPI_C_BOOL, {MPI_UINT8_T,1} },
    {MPI_C_FLOAT_COMPLEX, {MPI_C_FLOAT_COMPLEX,8} },
    {MPI_C_DOUBLE_COMPLEX, {MPI_C_DOUBLE_COMPLEX,16} },
    {MPI_C_LONG_DOUBLE_COMPLEX, {MPI_C_LONG_DOUBLE_COMPLEX,32} },
    {MPI_DOUBLE_INT, {MPI_DOUBLE_INT,sizeof(mona_double_int_t) } }
};

static size_t get_datatype_size(MPI_Datatype dt) {
    auto it = _type_info.find(dt);
    if(it != _type_info.end()) {
        LOG("MONA/MPI: Type size for datatype %ld is %lu\n", (long)dt, it->second.size);
        return it->second.size;
    }
    LOG("MONA/MPI: Could not find type size for datatype %ld\n", (long)dt);
    return 0;
}

static OperationValue get_mona_operation(MPI_Datatype dt, MPI_Op op) {
    auto it = _type_info.find(dt);
    if(it == _type_info.end()) {
        LOG("MONA/MPI: Could not find type info for datatype %ld\n", (long)dt);
        return OperationValue{ nullptr, nullptr };
    }
    auto it2 = _operations.find(OperationKey{ it->second.closest, op });
    if(it2 == _operations.end()) {
        LOG("MONA/MPI: Could not find operation for MPI_op %ld\n", (long)op);
        return OperationValue{ nullptr, nullptr };
    }
    LOG("MONA/MPI: Found operation of type %lu\n", (intptr_t)(it2->second.args));
    return it2->second;
}

static inline bool is_mona_comm(MPI_Comm user_comm) {
    return _user_comm_to_mona.count(user_comm);
}

static inline mona_comm_t get_mona_comm_from(MPI_Comm user_comm) {
    return _user_comm_to_mona[user_comm];
}

static inline MPI_Comm get_mpi_comm_from(MPI_Comm user_comm) {
    if(user_comm == MPI_COMM_NULL
    || user_comm == MPI_COMM_SELF
    || user_comm == MPI_COMM_WORLD)
        return user_comm;
    return _user_comm_to_mpi[user_comm];
}

static inline MPI_Comm register_new_mpi_comm(MPI_Comm mpi_comm) {
    do {
        last_user_comm += 1;
    } while(last_user_comm == MPI_COMM_NULL
         || last_user_comm == MPI_COMM_SELF
         || last_user_comm == MPI_COMM_WORLD);
    _user_comm_to_mpi[last_user_comm] = mpi_comm;
    return last_user_comm;
}

static inline void deregister_mpi_comm(MPI_Comm mpi_comm) {
    auto it = std::find_if(_user_comm_to_mpi.begin(),
                           _user_comm_to_mpi.end(),
                           [mpi_comm](const auto& p) {
                                return p.second == mpi_comm;
                            });
    if(it != _user_comm_to_mpi.end())
        _user_comm_to_mpi.erase(it);
}

static inline MPI_Comm register_new_mona_comm(mona_comm_t mona_comm) {
    do {
        last_user_comm += 1;
    } while(last_user_comm == MPI_COMM_NULL
         || last_user_comm == MPI_COMM_SELF
         || last_user_comm == MPI_COMM_WORLD);
    _user_comm_to_mona[last_user_comm] = mona_comm;
    return last_user_comm;
}

static inline void deregister_mona_comm(mona_comm_t mona_comm) {
    auto it = std::find_if(_user_comm_to_mona.begin(),
                           _user_comm_to_mona.end(),
                           [mona_comm](const auto& p) {
                                return p.second == mona_comm;
                            });
    if(it != _user_comm_to_mona.end())
        _user_comm_to_mona.erase(it);
}

extern "C" int MPI_Register_mona_comm(mona_comm_t comm, MPI_Comm* newcomm) {
    auto it = std::find_if(_user_comm_to_mona.begin(),
                           _user_comm_to_mona.end(),
                           [comm](const auto& p) {
                                return p.second == comm;
                            });
    if(it != _user_comm_to_mona.end())
        *newcomm = it->first;
    else
        *newcomm = register_new_mona_comm(comm);
    return 0;
}

static inline bool is_mona_req(MPI_Request user_req) {
    return _user_req_to_mona.count(user_req);
}

static inline mona_request_t get_mona_req_from(MPI_Request user_req) {
    auto it = _user_req_to_mona.find(user_req);
    if(it == _user_req_to_mona.end()) {
        LOG("Warning: get_mona_req_from could not convert user_req\n");
        return nullptr;
    }
    return it->second;
}

static inline MPI_Request get_mpi_req_from(MPI_Request user_req) {
    if(user_req == MPI_REQUEST_NULL)
        return user_req;
    return _user_req_to_mpi[user_req];
}

static inline MPI_Request register_new_mpi_req(MPI_Request mpi_req) {
    do {
        last_user_req += 1;
    } while(last_user_req == MPI_REQUEST_NULL);
    _user_req_to_mpi[last_user_req] = mpi_req;
    return last_user_req;
}

static inline void deregister_mpi_req(MPI_Request mpi_req) {
    auto it = std::find_if(_user_req_to_mpi.begin(),
                           _user_req_to_mpi.end(),
                           [mpi_req](const auto& p) {
                                return p.second == mpi_req;
                            });
    if(it != _user_req_to_mpi.end())
        _user_req_to_mpi.erase(it);
}

static inline MPI_Request register_new_mona_req(mona_request_t mona_req) {
    do {
        last_user_req += 1;
    } while(last_user_req == MPI_REQUEST_NULL);
    _user_req_to_mona[last_user_req] = mona_req;
    return last_user_req;
}

static inline void deregister_mona_req(mona_request_t mona_req) {
    auto it = std::find_if(_user_req_to_mona.begin(),
                           _user_req_to_mona.end(),
                           [mona_req](const auto& p) {
                                return p.second == mona_req;
                            });
    if(it != _user_req_to_mona.end())
        _user_req_to_mona.erase(it);
}
// ------------------------------------------------------------------------ //
// MONA implementation of a subset of MPI functions
// ------------------------------------------------------------------------ //

static int MONA_MPI_Comm_size(MPI_Comm user_comm, int* size) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_size(mona_comm, size);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Comm_rank(MPI_Comm user_comm, int* rank) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_rank(mona_comm, rank);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Comm_free(MPI_Comm* user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(*user_comm);
    deregister_mona_comm(mona_comm);
    *user_comm = MPI_COMM_NULL;
    return 0;
}

static int MONA_MPI_Send(const void *buf, int count, MPI_Datatype datatype,
                         int dest, int tag, MPI_Comm user_comm) {
    size_t dtype_size = get_datatype_size(datatype);
    if(dtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    na_return_t ret = mona_comm_send(mona_comm, buf, count*dtype_size, dest, tag);
    if(ret != NA_SUCCESS) return ret;
    return 0;
}

static int MONA_MPI_Isend(const void *buf, int count, MPI_Datatype datatype,
                          int dest, int tag, MPI_Comm user_comm, MPI_Request* user_req) {
    size_t dtype_size = get_datatype_size(datatype);
    LOG("MONA/MPI: MONA_MPI_Isend to %d with tag %d\n", dest, tag);
    if(dtype_size == 0) {
        return -1;
    }
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    mona_request_t mona_req;
    na_return_t ret = mona_comm_isend(mona_comm, buf, count*dtype_size, dest, tag, &mona_req);
    if(ret != NA_SUCCESS) return ret;
    *user_req = register_new_mona_req(mona_req);
    return 0;
}

static int MONA_MPI_Recv(void *buf, int count, MPI_Datatype datatype,
                         int src, int tag, MPI_Comm user_comm, MPI_Status* status) {
    size_t dtype_size = get_datatype_size(datatype);
    if(dtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);

    src = (src == MPI_ANY_SOURCE) ? MONA_ANY_SOURCE : src;
    tag = (tag == MPI_ANY_TAG) ? MONA_ANY_TAG : tag;
    size_t   received_size = 0;
    int      received_src  = src;
    na_tag_t received_tag  = tag;
    int* received_src_ptr  = (src == MONA_ANY_SOURCE) ? &received_src : NULL;

    na_return_t ret = mona_comm_recv(mona_comm, buf,
            count*dtype_size, src, tag, &received_size, received_src_ptr, &received_tag);
    if(ret != NA_SUCCESS) return ret;
    if(status && status != MPI_STATUS_IGNORE) {
        PMPI_Status_set_elements(status, datatype, received_size/dtype_size);
        PMPI_Status_set_cancelled(status, 0);
        status->MPI_SOURCE = received_src;
        status->MPI_TAG = received_tag;
    }
    return 0;
}

static int MONA_MPI_Irecv(void *buf, int count, MPI_Datatype datatype,
                         int src, int tag, MPI_Comm user_comm, MPI_Request* user_req) {
    size_t dtype_size = get_datatype_size(datatype);
    if(dtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    mona_request_t mona_req;
    src = (src == MPI_ANY_SOURCE) ? MONA_ANY_SOURCE : src;
    tag = (tag == MPI_ANY_TAG) ? MONA_ANY_TAG : tag;
    // XXX we are loosing information about actual source, tag, and size,
    // that we won't be able to provide to MPI_Wait.
    na_return_t ret = mona_comm_irecv(
            mona_comm, buf, count*dtype_size,
            src, tag, nullptr, nullptr, nullptr, &mona_req);
    if(ret != NA_SUCCESS) return ret;
    *user_req = register_new_mona_req(mona_req);
    return 0;
}

static int MONA_MPI_Wait(MPI_Request* user_req, MPI_Status* status) {
    mona_request_t mona_req = get_mona_req_from(*user_req);
    if(!mona_req) return 0;
    na_return_t ret = mona_wait(mona_req);
    deregister_mona_req(mona_req);
    return ret;
}

static int MONA_MPI_Probe(int source, int tag, MPI_Comm user_comm, MPI_Status* status) {
     mona_comm_t mona_comm = get_mona_comm_from(user_comm);
     source = (source == MPI_ANY_SOURCE) ? MONA_ANY_SOURCE : source;
     tag = (tag == MPI_ANY_TAG) ? MONA_ANY_TAG : tag;
     size_t   actual_size;
     int      actual_src = source;
     int*     actual_src_ptr = (source == MONA_ANY_SOURCE) ? &actual_src : NULL;
     na_tag_t actual_tag;
     na_return_t ret = mona_comm_probe(
        mona_comm, source, tag, &actual_size, actual_src_ptr, &actual_tag);
     if(ret != NA_SUCCESS) return ret;
     if(status && status != MPI_STATUS_IGNORE) {
        status->MPI_ERROR = 0;
        status->MPI_TAG = actual_tag;
        status->MPI_SOURCE = actual_src;
        PMPI_Status_set_elements(status, MPI_BYTE, actual_size);
        PMPI_Status_set_cancelled(status, 0);
     }
     return NA_SUCCESS;
}

static int MONA_MPI_Iprobe(int source, int tag, MPI_Comm user_comm, int* flag, MPI_Status* status) {
    LOG("MONA/MPI: MONA_MPI_Iprobe with source %d and tag %d\n", source, tag);
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    source = (source == MPI_ANY_SOURCE) ? MONA_ANY_SOURCE : source;
    tag = (tag == MPI_ANY_TAG) ? MONA_ANY_TAG : tag;
    size_t   actual_size = 0;
    int      actual_src = source;
    int*     actual_src_ptr = (source == MONA_ANY_SOURCE) ? &actual_src : NULL;
    na_tag_t actual_tag;
    int uflag = 0;
    na_return_t ret = mona_comm_iprobe(
            mona_comm, source, tag, &uflag, &actual_size, actual_src_ptr, &actual_tag);
    LOG("MONA/MPI: MONA_MPI_Iprobe return %d and flag is %d\n", ret, uflag);
    if(ret != NA_SUCCESS) return ret;
    if(flag) *flag = uflag;
    if(uflag && status && status != MPI_STATUS_IGNORE) {
        status->MPI_ERROR = 0;
        status->MPI_TAG = actual_tag;
        status->MPI_SOURCE = actual_src;
        PMPI_Status_set_elements(status, MPI_BYTE, actual_size);
        PMPI_Status_set_cancelled(status, 0);
    }
    return NA_SUCCESS;
}

static int MONA_MPI_Test(MPI_Request* user_req, int* flag, MPI_Status* status) {
     mona_request_t mona_req = get_mona_req_from(*user_req);
     if(!mona_req) return -1;
     return mona_test(mona_req, flag);
}

static int MONA_MPI_Request_free(MPI_Request* user_req) {
    mona_request_t mona_req = get_mona_req_from(*user_req);
    if(mona_req) {
        return MONA_MPI_Wait(user_req, MPI_STATUS_IGNORE);
    }
    return 0;
}

static int MONA_MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                             int dest, int sendtag,
                             void *recvbuf, int recvcount, MPI_Datatype recvtype,
                             int source, int recvtag,
                             MPI_Comm user_comm, MPI_Status *status) {
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t received_size = 0;
    na_return_t ret = mona_comm_sendrecv(
        mona_comm, sendbuf, sendcount*sendtype_size, dest, sendtag,
        recvbuf, recvcount*recvtype_size, source, recvtag, &received_size);
    if(ret != NA_SUCCESS) return ret;
    if(status && status != MPI_STATUS_IGNORE) {
        PMPI_Status_set_elements(status, recvtype, received_size/recvtype_size);
        PMPI_Status_set_cancelled(status, 0);
    }
    return 0;
}

static int MONA_MPI_Barrier(MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    return (int)mona_comm_barrier(mona_comm, 0);
}

static int MONA_MPI_Bcast(void* buffer, int count,
                          MPI_Datatype datatype, int root, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t type_size = get_datatype_size(datatype);
    if(type_size == 0) return -1;
    return (int)mona_comm_bcast(mona_comm, buffer, count*type_size, root, 0);
}

static int MONA_MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                              void *recvbuf, int recvcount, MPI_Datatype recvtype,
                              MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    if(sendtype_size*sendcount != recvtype_size*recvcount) return -1;
    return (int)mona_comm_allgather(mona_comm, sendbuf, sendtype_size*sendcount, recvbuf, 0);
}

static int MONA_MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                           void *recvbuf, int recvcount, MPI_Datatype recvtype,
                           int root, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    if(sendtype_size*sendcount != recvtype_size*recvcount) return -1;
    return (int)mona_comm_gather(mona_comm, sendbuf, sendtype_size*sendcount, recvbuf, root, 0);
}

static int MONA_MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, const int *recvcounts, const int *displs,
                            MPI_Datatype recvtype, int root, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    int n = 0;
    na_return_t ret = mona_comm_size(mona_comm, &n);
    if(ret != NA_SUCCESS) return ret;
    std::vector<size_t> m_recv_sizes(n);
    std::vector<size_t> m_displ(n);
    for(int i=0; i < n; i++) {
        m_recv_sizes[i] = (size_t)recvcounts[i]*recvtype_size;
        m_displ[i] = (size_t)displs[i]*recvtype_size;
    }
    return (int)mona_comm_gatherv(mona_comm, sendbuf, sendtype_size*sendcount,
            recvbuf, m_recv_sizes.data(), m_displ.data(), root, 0);
}

static int MONA_MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, const int *recvcounts, const int *displs,
                            MPI_Datatype recvtype, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    int n = 0;
    na_return_t ret = mona_comm_size(mona_comm, &n);
    if(ret != NA_SUCCESS) return ret;
    std::vector<size_t> m_recv_sizes(n);
    std::vector<size_t> m_displ(n);
    for(int i=0; i < n; i++) {
        m_recv_sizes[i] = (size_t)recvcounts[i]*recvtype_size;
        m_displ[i] = (size_t)displs[i]*recvtype_size;
    }
    return (int)mona_comm_allgatherv(mona_comm, sendbuf, sendtype_size*sendcount,
            recvbuf, m_recv_sizes.data(), m_displ.data(), 0);
}

static int MONA_MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                            void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
                            MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    if(sendtype_size*sendcount != recvtype_size*recvcount) return -1;
    return (int)mona_comm_scatter(mona_comm, sendbuf, sendtype_size*sendcount, recvbuf, root, 0);
}

static int MONA_MPI_Scatterv(const void *sendbuf, const int *sendcounts, const int *displs,
                             MPI_Datatype sendtype, void *recvbuf, int recvcount,
                             MPI_Datatype recvtype,
                             int root, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    int n = 0;
    na_return_t ret = mona_comm_size(mona_comm, &n);
    if(ret != NA_SUCCESS) return ret;
    std::vector<size_t> m_sendcounts(n);
    std::vector<size_t> m_displs(n);
    for(int i=0; i < n; i++) {
        m_sendcounts[i] = (size_t)sendcounts[i]*sendtype_size;
        m_displs[i] = (size_t)displs[i]*sendtype_size;
    }
    return (int)mona_comm_scatterv(mona_comm, sendbuf, m_sendcounts.data(), m_displs.data(),
                                   recvbuf, recvcount*recvtype_size, root, 0);
}

static int MONA_MPI_Reduce(const void *sendbuf, void *recvbuf, int count,
                           MPI_Datatype datatype, MPI_Op op, int root,
                           MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    OperationValue mona_op = get_mona_operation(datatype, op);
    if(!mona_op.op) return -1;
    size_t typesize = get_datatype_size(datatype);
    if(!typesize) return -1;
    return (int)mona_comm_reduce(mona_comm, sendbuf, recvbuf, typesize, count,
                                 mona_op.op, mona_op.args, root, 0);
}

static int MONA_MPI_Allreduce(const void *sendbuf, void *recvbuf, int count,
                              MPI_Datatype datatype, MPI_Op op,
                              MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    OperationValue mona_op = get_mona_operation(datatype, op);
    if(!mona_op.op) return -1;
    size_t typesize = get_datatype_size(datatype);
    if(!typesize) return -1;
    if(sendbuf == MPI_IN_PLACE)
        sendbuf = MONA_IN_PLACE;
    return (int)mona_comm_allreduce(mona_comm, sendbuf, recvbuf, typesize,
                                    count, mona_op.op, mona_op.args, 0);
}

static int MONA_MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
        void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm user_comm) {
    mona_comm_t mona_comm = get_mona_comm_from(user_comm);
    size_t sendtype_size = get_datatype_size(sendtype);
    size_t recvtype_size = get_datatype_size(recvtype);
    if(sendtype_size == 0) return -1;
    if(recvtype_size == 0) return -1;
    if(sendtype_size*sendcount != recvtype_size*recvcount) return -1;
    return (int)mona_comm_alltoall(mona_comm, sendbuf, sendtype_size*sendcount, recvbuf, 0);
}

// ------------------------------------------------------------------------ //
// Default MONA implementation for non-supported functions
// ------------------------------------------------------------------------ //

{{foreachfn FUNCTION MPI_Abort
                 MPI_Alltoallv
                 MPI_Alltoallw
                 MPI_Attr_delete
                 MPI_Attr_get
                 MPI_Attr_put
                 MPI_Bsend
                 MPI_Bsend_init
                 MPI_Cart_coords
                 MPI_Cart_get
                 MPI_Cart_map
                 MPI_Cart_rank
                 MPI_Cart_shift
                 MPI_Cart_sub
                 MPI_Cartdim_get
                 MPI_Comm_accept
                 MPI_Comm_call_errhandler
                 MPI_Comm_connect
                 MPI_Comm_create
                 MPI_Comm_create_group
                 MPI_Comm_delete_attr
                 MPI_Comm_dup
                 MPI_Comm_dup_with_info
                 MPI_Comm_get_attr
                 MPI_Comm_get_errhandler
                 MPI_Comm_get_info
                 MPI_Comm_get_name
                 MPI_Comm_group
                 MPI_Comm_idup
                 MPI_Comm_remote_group
                 MPI_Comm_remote_size
                 MPI_Comm_set_attr
                 MPI_Comm_set_errhandler
                 MPI_Comm_set_info
                 MPI_Comm_set_name
                 MPI_Comm_split
                 MPI_Comm_split_type
                 MPI_Comm_test_inter
                 MPI_Dist_graph_create_adjacent
                 MPI_Dist_graph_neighbors
                 MPI_Dist_graph_neighbors_count
                 MPI_Errhandler_get
                 MPI_Errhandler_set
                 MPI_Exscan
                 MPI_File_open
                 MPI_Graph_get
                 MPI_Graph_map
                 MPI_Graph_neighbors
                 MPI_Graph_neighbors_count
                 MPI_Graphdims_get
                 MPI_Iallgather
                 MPI_Iallgatherv
                 MPI_Iallreduce
                 MPI_Ialltoall
                 MPI_Ialltoallv
                 MPI_Ialltoallw
                 MPI_Ibarrier
                 MPI_Ibcast
                 MPI_Ibsend
                 MPI_Iexscan
                 MPI_Igather
                 MPI_Igatherv
                 MPI_Improbe
                 MPI_Ineighbor_allgather
                 MPI_Ineighbor_allgatherv
                 MPI_Ineighbor_alltoall
                 MPI_Ineighbor_alltoallv
                 MPI_Ineighbor_alltoallw
                 MPI_Ireduce
                 MPI_Ireduce_scatter
                 MPI_Ireduce_scatter_block
                 MPI_Irsend
                 MPI_Iscatter
                 MPI_Iscatterv
                 MPI_Issend
                 MPI_Mprobe
                 MPI_Neighbor_allgather
                 MPI_Neighbor_allgatherv
                 MPI_Neighbor_alltoall
                 MPI_Neighbor_alltoallv
                 MPI_Neighbor_alltoallw
                 MPI_Pack
                 MPI_Pack_size
                 MPI_Recv_init
                 MPI_Reduce_scatter
                 MPI_Reduce_scatter_block
                 MPI_Rsend
                 MPI_Rsend_init
                 MPI_Scan
                 MPI_Send_init
                 MPI_Sendrecv_replace
                 MPI_Ssend
                 MPI_Ssend_init
                 MPI_Topo_test
                 MPI_Unpack
                 MPI_Win_allocate
                 MPI_Win_allocate_shared
                 MPI_Win_create
                 MPI_Win_create_dynamic
                 MPI_Intercomm_merge
                 MPI_Graph_create
                 MPI_Comm_compare
                 MPI_Intercomm_create
                 MPI_Comm_disconnect
                 MPI_Dist_graph_create}}
static {{ret_type}} MONA_{{FUNCTION}}{{argTypeList}} {
    std::cerr << "MONA_{{FUNCTION}} not implemented" << std::endl;
    return -1;
}
{{endforeachfn}}

// ------------------------------------------------------------------------ //
// PMPI wrappers for functions that have an argument requiring translation
// (MPI_Comm, MPI_Request, etc.)
// ------------------------------------------------------------------------ //

#define IS_MONA_COMM(__comm__) \
        int __is_mona_comm = is_mona_comm(__comm__)

#define CONVERT_TO_MPI_COMM(__comm__) \
        __comm__ = get_mpi_comm_from(__comm__)

#define CONVERT_TO_MPI_REQ(__req__) \
        __req__ = get_mpi_req_from(__req__)

// MPI_Bcast
// MPI_Allreduce
// MPI_Allgather

{{fn    FUNCTION MPI_Abort
                 MPI_Allgatherv
                 MPI_Alltoall
                 MPI_Alltoallv
                 MPI_Alltoallw
                 MPI_Attr_delete
                 MPI_Attr_get
                 MPI_Attr_put
                 MPI_Barrier
                 MPI_Bsend
                 MPI_Bsend_init
                 MPI_Cart_coords
                 MPI_Cart_get
                 MPI_Cart_map
                 MPI_Cart_rank
                 MPI_Cart_shift
                 MPI_Cart_sub
                 MPI_Cartdim_get
                 MPI_Comm_accept
                 MPI_Comm_call_errhandler
                 MPI_Comm_connect
                 MPI_Comm_create
                 MPI_Comm_create_group
                 MPI_Comm_delete_attr
                 MPI_Comm_dup
                 MPI_Comm_dup_with_info
                 MPI_Comm_get_attr
                 MPI_Comm_get_errhandler
                 MPI_Comm_get_info
                 MPI_Comm_get_name
                 MPI_Comm_group
                 MPI_Comm_idup
                 MPI_Comm_rank
                 MPI_Comm_remote_group
                 MPI_Comm_remote_size
                 MPI_Comm_set_attr
                 MPI_Comm_set_errhandler
                 MPI_Comm_set_info
                 MPI_Comm_set_name
                 MPI_Comm_size
                 MPI_Comm_split
                 MPI_Comm_split_type
                 MPI_Comm_test_inter
                 MPI_Dist_graph_create_adjacent
                 MPI_Dist_graph_neighbors
                 MPI_Dist_graph_neighbors_count
                 MPI_Errhandler_get
                 MPI_Errhandler_set
                 MPI_Exscan
                 MPI_File_open
                 MPI_Gather
                 MPI_Gatherv
                 MPI_Graph_get
                 MPI_Graph_map
                 MPI_Graph_neighbors
                 MPI_Graph_neighbors_count
                 MPI_Graphdims_get
                 MPI_Iallgather
                 MPI_Iallgatherv
                 MPI_Iallreduce
                 MPI_Ialltoall
                 MPI_Ialltoallv
                 MPI_Ialltoallw
                 MPI_Ibarrier
                 MPI_Ibcast
                 MPI_Ibsend
                 MPI_Iexscan
                 MPI_Igather
                 MPI_Igatherv
                 MPI_Improbe
                 MPI_Ineighbor_allgather
                 MPI_Ineighbor_allgatherv
                 MPI_Ineighbor_alltoall
                 MPI_Ineighbor_alltoallv
                 MPI_Ineighbor_alltoallw
                 MPI_Iprobe
                 MPI_Irecv
                 MPI_Ireduce
                 MPI_Ireduce_scatter
                 MPI_Ireduce_scatter_block
                 MPI_Irsend
                 MPI_Iscatter
                 MPI_Iscatterv
                 MPI_Isend
                 MPI_Issend
                 MPI_Mprobe
                 MPI_Neighbor_allgather
                 MPI_Neighbor_allgatherv
                 MPI_Neighbor_alltoall
                 MPI_Neighbor_alltoallv
                 MPI_Neighbor_alltoallw
                 MPI_Pack
                 MPI_Pack_size
                 MPI_Probe
                 MPI_Recv
                 MPI_Recv_init
                 MPI_Reduce
                 MPI_Reduce_scatter
                 MPI_Reduce_scatter_block
                 MPI_Rsend
                 MPI_Rsend_init
                 MPI_Scan
                 MPI_Scatter
                 MPI_Scatterv
                 MPI_Send
                 MPI_Send_init
                 MPI_Sendrecv
                 MPI_Sendrecv_replace
                 MPI_Ssend
                 MPI_Ssend_init
                 MPI_Topo_test
                 MPI_Unpack
                 MPI_Win_allocate
                 MPI_Win_allocate_shared
                 MPI_Win_create
                 MPI_Win_create_dynamic
                 MPI_Intercomm_merge
                 MPI_Graph_create
                 MPI_Dist_graph_create}}
    {{applyToType MPI_Comm IS_MONA_COMM}}
    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for {{FUNCTION}}\n");
        {{ret_val}} = MONA_{{FUNCTION}}({{args}});
    } else {
        {{applyToType MPI_Comm CONVERT_TO_MPI_COMM}}
        {{applyToType MPI_Request CONVERT_TO_MPI_REQ}}
        LOG("MONA/MPI: Calling MPI wrapper for {{FUNCTION}}\n");
        {{callfn}}
    }
{{endfn}}

/* ================== C Wrappers for MPI_Comm_disconnect ================== */
_EXTERN_C_ int PMPI_Comm_disconnect(MPI_Comm *comm);
_EXTERN_C_ int MPI_Comm_disconnect(MPI_Comm *comm) {
    int _wrap_py_return_val = 0;

    IS_MONA_COMM(*comm);

    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Comm_disconnect\n");
        _wrap_py_return_val = MONA_MPI_Comm_disconnect(comm);
    } else {
        MPI_Comm mpi_comm = get_mpi_comm_from(*comm);
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Comm_disconnect\n");
        _wrap_py_return_val = PMPI_Comm_disconnect(&mpi_comm);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Comm_free ================== */
_EXTERN_C_ int PMPI_Comm_free(MPI_Comm *comm);
_EXTERN_C_ int MPI_Comm_free(MPI_Comm *comm) {
    int _wrap_py_return_val = 0;

    IS_MONA_COMM(*comm);

    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Comm_free\n");
        _wrap_py_return_val = MONA_MPI_Comm_free(comm);
    } else {
        MPI_Comm mpi_comm = get_mpi_comm_from(*comm);
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Comm_free\n");
        _wrap_py_return_val = PMPI_Comm_free(&mpi_comm);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Comm_compare ================== */
_EXTERN_C_ int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
_EXTERN_C_ int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) {
    int _wrap_py_return_val = 0;

    int __comm1_is_mona = is_mona_comm(comm1);
    int __comm2_is_mona = is_mona_comm(comm2);

    if(__comm1_is_mona && __comm2_is_mona) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Comm_compare\n");
        _wrap_py_return_val = MONA_MPI_Comm_compare(comm1, comm2, result);
    } else if(!__comm2_is_mona && !__comm2_is_mona) {
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Comm_compare\n");
        MPI_Comm mpi_comm1 = get_mpi_comm_from(comm1);
        MPI_Comm mpi_comm2 = get_mpi_comm_from(comm2);
        _wrap_py_return_val = PMPI_Comm_compare(mpi_comm1, mpi_comm2, result);
    } else {
       *result = 0;
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Intercomm_create ================== */
_EXTERN_C_ int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm);
_EXTERN_C_ int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm) {
    int _wrap_py_return_val = 0;

    int __is_mona_local_comm = is_mona_comm(local_comm);
    int __is_mona_peer_comm = is_mona_comm(peer_comm);

    if(__is_mona_local_comm && __is_mona_peer_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Intercomm_create\n");
        _wrap_py_return_val = MONA_MPI_Intercomm_create(local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm);
    } else if(!__is_mona_local_comm && !__is_mona_peer_comm) {
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Intercomm_create\n");
        MPI_Comm mpi_local_comm = get_mpi_comm_from(local_comm);
        MPI_Comm mpi_peer_comm = get_mpi_comm_from(peer_comm);
        _wrap_py_return_val = PMPI_Intercomm_create(mpi_local_comm, local_leader, mpi_peer_comm, remote_leader, tag, newintercomm);
        *newintercomm = register_new_mpi_comm(*newintercomm);
    } else {
        _wrap_py_return_val = -1;
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Allreduce ================== */
_EXTERN_C_ int PMPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
_EXTERN_C_ int MPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) {
    int _wrap_py_return_val = 0;

    LOG("MONA/MPI Calling Allreduce with sendbuf=%p, recvbuf=%p, count=%d, "
        "datatype=%ld, op=%ld, user_comm=%ld\n", sendbuf, recvbuf, count,
        (long)datatype, (long)op, (long)comm);
    IS_MONA_COMM(comm);

    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Allreduce\n");
        _wrap_py_return_val = MONA_MPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
    } else {

        LOG("MONA/MPI: Calling MPI wrapper for MPI_Allreduce\n");
        _wrap_py_return_val = PMPI_Allreduce(sendbuf, recvbuf, count, datatype, op, comm);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Bcast ================== */
_EXTERN_C_ int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm);
_EXTERN_C_ int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm) {
    int _wrap_py_return_val = 0;

    LOG("MONA/MPI Calling Bcast with buffer=%p, count=%d, "
        "datatype=%ld, root=%d, user_comm=%ld\n", buffer, count,
        (long)datatype, root, (long)comm);
    IS_MONA_COMM(comm);

    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Bcast\n");
        _wrap_py_return_val = MONA_MPI_Bcast(buffer, count, datatype, root, comm);
    } else {

        LOG("MONA/MPI: Calling MPI wrapper for MPI_Bcast\n");
        _wrap_py_return_val = PMPI_Bcast(buffer, count, datatype, root, comm);
    }

    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Allgather ================== */
_EXTERN_C_ int PMPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
_EXTERN_C_ int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) {
    int _wrap_py_return_val = 0;

    IS_MONA_COMM(comm);
    LOG("MONA/MPI Calling Allgather with sendbuf=%p, sendcount=%d, "
        "sendtype=%ld, recvbuf=%p, recvcount=%d, recvtype=%ld, user_comm=%ld\n",
        sendbuf, sendcount, (long)sendtype, recvbuf, recvcount, (long)recvtype,
        (long)comm);

    if(__is_mona_comm) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Allgather\n");
        _wrap_py_return_val = MONA_MPI_Allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm);
    } else {

        LOG("MONA/MPI: Calling MPI wrapper for MPI_Allgather\n");
        _wrap_py_return_val = PMPI_Allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm);
    }

    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Request_free ================== */
_EXTERN_C_ int PMPI_Request_free(MPI_Request* user_req);
_EXTERN_C_ int MPI_Request_free(MPI_Request* user_req) {
    int _wrap_py_return_val = 0;

    int __req_is_mona = is_mona_req(*user_req);
    if(__req_is_mona) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Request_free\n");
        _wrap_py_return_val = MONA_MPI_Request_free(user_req);
    } else {
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Request_free\n");
        MPI_Request mpi_req = get_mpi_req_from(*user_req);
        _wrap_py_return_val = MPI_Request_free(&mpi_req);
        *user_req = MPI_REQUEST_NULL;
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Test ================== */
_EXTERN_C_ int PMPI_Test(MPI_Request* user_req, int* flag, MPI_Status* status);
_EXTERN_C_ int MPI_Test(MPI_Request* user_req, int* flag, MPI_Status* status) {
    int _wrap_py_return_val = 0;

    int __req_is_mona = is_mona_req(*user_req);
    if(__req_is_mona) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Test\n");
        _wrap_py_return_val = MONA_MPI_Test(user_req, flag, status);
    } else {
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Test\n");
        MPI_Request mpi_req = get_mpi_req_from(*user_req);
        _wrap_py_return_val = MPI_Test(&mpi_req, flag, status);
    }
    return _wrap_py_return_val;
}

/* ================== C Wrappers for MPI_Wait ================== */
_EXTERN_C_ int PMPI_Wait(MPI_Request* user_req, MPI_Status* status);
_EXTERN_C_ int MPI_Wait(MPI_Request* user_req, MPI_Status* status) {
    int _wrap_py_return_val = 0;

    int __req_is_mona = is_mona_req(*user_req);
    if(__req_is_mona) {
        LOG("MONA/MPI: Calling MONA wrapper for MPI_Wait\n");
        _wrap_py_return_val = MONA_MPI_Wait(user_req, status);
    } else {
        LOG("MONA/MPI: Calling MPI wrapper for MPI_Wait\n");
        MPI_Request mpi_req = get_mpi_req_from(*user_req);
        _wrap_py_return_val = MPI_Wait(&mpi_req, status);
    }
    return _wrap_py_return_val;
}

